import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.io.File;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
//Kevin Wang (kw7hv) and Justin Morris (jwm2qe)
//lab section : 103
/**
 * ZombieSurvival.java
 * 
 * The ZombieSurvival is the field of play for the game. It passes messages
 * between the Human and the Zombies. It also picks up the commands from the
 * mouse and does the appropriate action. This is the class that will have the
 * main method to start the game.
 * 
 * @authors Kevin Wang and Justin Morris
 * @compid kw7hv and jwm2qe
 * @lab 103
 */
public class ZombieSurvival {

	// The SurvivalField needs a canvas to draw on
	private SimpleCanvas canvas;

	// The InfoFrame that you use for output instead of System.out
	private InfoFrame output;

	// Default board size
	private final int BOARDHEIGHT = 700;
	private final int BOARDWIDTH = 700;
	private ArrayList<Zombie> z;
	private Human h;
	private ArrayList<Rectangle> o;
	private boolean gameover;
	private int score;
	private int zc;
	private int time;
	private int btime;
	private static int level;

	// --------------------------------------------------------
	// Fields
	// You should setup fields to keep up with:
	// - a whole bunch of Zombies
	// - a single Human
	// - a whole bunch of obstacles, represented as Rectangles
	// - some way to know if the game is over
	// - a way to keep track of the score
	// - how many zombies you should start with
	// --------------------------------------------------------

	// -----------------------------------------
	// Methods

	/**
	 * The Constructor - This method should instantiate a new canvas, create a
	 * new player character, and create the first four zombies in random
	 * locations around the board.
	 */
	public ZombieSurvival() throws Exception {
		// Create canvas object with 500x500 spatial dimensions.
		canvas = new SimpleCanvas(BOARDWIDTH, BOARDHEIGHT, this);

		// Initialize your output frame
		output = new InfoFrame(this);

		// TODO: Here is where you should create your initial zombies and your Human
		// 20 is a good speed for the human - 10 for the zombie, but experiment!
		// You should also load your course file here to get the obstacles
		// on screen.
		h = new Human(350,350);
		zc = 4;
		z = new ArrayList<Zombie>();
		for (int i = 0;i<zc;i++){
			Random r = new Random();
			int x = r.nextInt(700)+1;
			int y = r.nextInt(700)+1;
			Zombie zombie = new Zombie(x,y);
			z.add(zombie);
		}
		gameover = false;
		output.println("New Player Created! You start with 3 bombs!");
		time = 0;
		btime = 0;
	}

	/**
	 * This method takes a file name that contains information about obstacles
	 * in the game.  It should be formatted: x,y,width,height
	 * @param filename Name of the file
	 * @throws Exception
	 */
	public void loadObstaclesLv1(String filename) throws Exception {
		// TODO: fill in this method to read the csv file and 
		// populate a list of obstacle Rectangles
		File f = new File(filename);
		Scanner s = new Scanner(f);
		o = new ArrayList<Rectangle>();
		for (int i = 0;i<2;i++){
			String[] line = s.nextLine().split(",");
			Rectangle r = new Rectangle(Integer.parseInt(line[0]),Integer.parseInt(line[1]),Integer.parseInt(line[2]),Integer.parseInt(line[3]));
			o.add(r);
		}
	}
	public void loadObstaclesLv2(String filename) throws Exception {
		// TODO: fill in this method to read the csv file and 
		// populate a list of obstacle Rectangles
		File f = new File(filename);
		Scanner s = new Scanner(f);
		o = new ArrayList<Rectangle>();
		for (int i = 0;i<2;i++){
			String[] line = s.nextLine().split(",");
		}
		for (int i = 0;i<2;i++){
			String[] line = s.nextLine().split(",");
			Rectangle r = new Rectangle(Integer.parseInt(line[0]),Integer.parseInt(line[1]),Integer.parseInt(line[2]),Integer.parseInt(line[3]));
			o.add(r);
		}
	}

	/**
	 * This method should control all of your mouse actions. The mouse activity
	 * is picked up by the SimpleCanvas and then it should call this method,
	 * passing either the button that was pressed or some other flag.
	 */
	public void mouseAction(float x, float y, int button) {
		// TODO: Change this method to help the player move!
		if (button == -1) {
			h.setX2(x);
			h.setY2(y);
		}

		if (button == 1) {
			if (h.getBombs()>0){
				btime = time;
				detonateBomb();
			} else {
				output.println("Out of bombs!");
			}
		}

		if (button == 3) {
			gameover = true;
			output.println("Suicide button!!!");
			output.println("Game Over!");
			output.println("Your Score: "+score);
			h.setSpeed(0);
			for (int j = 0;j<z.size();j++){
				z.get(j).setSpeed(0);
			}
		}

	}

	/**
	 * This method controls the bomb action. It should check to see if the
	 * player has any bombs. If so, that count should be decremented by one.
	 * Then every zombie within a 50 pixel radius of the player should be
	 * eliminated.
	 */
	public void detonateBomb() {
		// TODO: fill in this method to kill zombies near the human!
		h.setBombs(h.getBombs()-1);
		output.println("BOOM! You dropped a bomb! You now have "+h.getBombs()+" bombs!");
		for (int i= 0;i<z.size();i++){
			Zombie zombie = z.get(i);
			double d = Math.sqrt(Math.pow((double)((zombie.getX())-(h.getX())),2)+Math.pow((double)(zombie.getY()-h.getY()), 2));
			if (d<=150){
				z.remove(i);
				score = score +1;
			}
		}
	}

	/**
	 * This is the main drawing function that is automatically called whenever
	 * the canvas is ready to be redrawn. The 'elapsedTime' argument is the
	 * time, in seconds, since the last time this function was called.
	 * 
	 * Other things this method should do: 1. draw the zombies, obstacles, and the human on
	 * the screen 2. tell the zombies and human to move 3. check to see if the
	 * game is over after they move 4. halt the game if the game is over 5. update
	 * the score for every cycle that the user is alive 6. add a new zombie every
	 * 5000 or so cycles 7. add a new bomb every 50000 or so cycles
	 * 
	 * 
	 */
	public void draw(Graphics2D g, float elapsedTime) {
		// TODO: Nearly ALL your game logic will go here!  This is called on 
		// every refresh of the screen and is the "main game loop".

		// This is how you draw the Human, replacing the null with the human
		// object
		h.move(elapsedTime);
		canvas.drawHuman(g, h);

		// This is how you draw the Zombies, replacing the null with a zombie
		// object
		for(int i = 0;i<z.size();i++){
			z.get(i).move(elapsedTime, h);
			canvas.drawZombie(g, z.get(i));
		}

		// This is how your draw an obstacle, replacing the new Rectangle with
		// one from your list of obstacles
		if (level==1){
			try {
				loadObstaclesLv1("course.csv");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else if(level==2) {
			try {
				loadObstaclesLv2("course.csv");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		for (int i = 0;i<o.size();i++){
			canvas.drawObstacle(g, o.get(i));
		}
		for (int i = 0; i < o.size(); i++) {
			if (h.colX(o.get(i))&& h.colY(o.get(i))) {
				if (h.colTop(o.get(i))&&h.colRight(o.get(i))) {
					if (h.getX2() - h.getX() < 0&&h.getY2() - h.getY() > 0) {
						h.setX(h.getXo());
						h.setY(h.getYo());
					}
				} else if (h.colBottom(o.get(i))&&h.colLeft(o.get(i))) {
					if (h.getX2() - h.getX() > 0&&h.getY2() - h.getY() > 0) {
						h.setX(h.getXo());
						h.setY(h.getYo());
					}
				} else if (h.colTop(o.get(i))&&h.colRight(o.get(i))) {
					if (h.getX2() - h.getX() < 0&& h.getY2() - h.getY()< 0) {
						h.setX(h.getXo());
						h.setY(h.getYo());
					}
				} else if (h.colBottom(o.get(i))&& h.colLeft(o.get(i))) {
					if (h.getX2() - h.getX() > 0&&h.getY2() - h.getY() < 0) {
						h.setX(h.getXo());
						h.setY(h.getYo());
					}
				}
			} else if (h.colX(o.get(i))) {
				h.setX(h.getXo());
			} else if (h.colY(o.get(i))) {
				h.setY(h.getYo());
			}
			for (int j = 0; j < z.size(); j++) {
				if (z.get(j).colX(o.get(i))&& z.get(j).colY(o.get(i))) {
					if (z.get(j).colTop(o.get(i))&& z.get(j).colRight(o.get(i))) {
						if (z.get(j).getX2() - z.get(j).getX() < 0&& z.get(j).getY2()- z.get(j).getY() > 0) {
							z.get(j).setX(z.get(j).getXo());
							z.get(j).setY(z.get(j).getYo());
						}
					} else if (z.get(j).colBottom(o.get(i))&& z.get(j).colLeft(o.get(i))) {
						if (z.get(j).getX2() - z.get(j).getX() > 0&& z.get(j).getY2()- z.get(j).getY() > 0) {
							z.get(j).setX(z.get(j).getXo());
							z.get(j).setY(z.get(j).getYo());
						}
					} else if (z.get(j).colTop(o.get(i))&& z.get(j).colRight(o.get(i))) {
						if (z.get(j).getX2() - z.get(j).getX() < 0&& z.get(j).getY2() - z.get(j).getY() < 0) {
							z.get(j).setX(z.get(j).getXo());
							z.get(j).setY(z.get(j).getYo());
						}
					} else if (z.get(j).colBottom(o.get(i))&& z.get(j).colLeft(o.get(i))) {
						if (z.get(j).getX2() - z.get(j).getX() > 0&& z.get(j).getY2() - z.get(j).getY() < 0) {
							z.get(j).setX(z.get(j).getXo());
							z.get(j).setY(z.get(j).getYo());
						}
					}
				} else if (z.get(j).colX(o.get(i))) {
					z.get(j).setX(z.get(j).getXo());
				} else if (z.get(j).colY(o.get(i))) {
					z.get(j).setY(z.get(j).getYo());
				}
			}
		}
		for (int i = 0; i < z.size(); i++) {
			for (int j = 0; j < z.size(); j++) {
				if (i == j) {}
				if (z.get(i).colX(z.get(j).getHitbox())&& z.get(i).colY(z.get(j).getHitbox())) {
					if (z.get(i).colTop(z.get(j).getHitbox())&& z.get(i).colRight(z.get(j).getHitbox())) {
						if (z.get(i).getX2() - z.get(i).getX() < 0&& z.get(i).getY2() - z.get(i).getY() > 0) {
							z.get(i).setX(z.get(i).getXo());
							z.get(i).setY(z.get(i).getYo());
						}
					} else if (z.get(i).colBottom(z.get(j).getHitbox())&& z.get(i).colLeft(z.get(j).getHitbox())) {
						if (z.get(i).getX2() - z.get(i).getX() > 0&& z.get(i).getY2() - z.get(i).getY() > 0) {
							z.get(i).setX(z.get(i).getXo());
							z.get(i).setY(z.get(i).getYo());
						}
					} else if (z.get(i).colTop(z.get(j).getHitbox())&& z.get(i).colRight(z.get(j).getHitbox())) {
						if (z.get(i).getX2() - z.get(i).getX() < 0&& z.get(i).getY2() - z.get(i).getY() < 0) {
							z.get(i).setX(z.get(i).getXo());
							z.get(i).setY(z.get(i).getYo());
						}
					} else if (z.get(i).colBottom(z.get(j).getHitbox())&& z.get(i).colLeft(z.get(j).getHitbox())) {
						if (z.get(i).getX2() - z.get(i).getX() > 0&& z.get(i).getY2() - z.get(i).getY() < 0) {
							z.get(i).setX(z.get(i).getXo());
							z.get(i).setY(z.get(i).getYo());
						}
					}
				} else if (z.get(i).colX(z.get(j).getHitbox())) {
					z.get(i).setX(z.get(i).getXo());
				} else if (z.get(i).colY(z.get(j).getHitbox())) {
					z.get(i).setY(z.get(i).getYo());
				}
			}
		}
		if (time-btime<200&&btime!=0){
			canvas.drawBoom(g, (int)h.getX()-20,(int) h.getY()-30);
		}
		if (gameover==false){
			for(int i = 0;i<z.size();i++){
				if(z.get(i).hCol(h)==true){
					gameover = true;
					output.println("NOMNOMNOMNOMNOMNOM\n");
					output.println("Game Over!");
					output.println("Your Score: "+score);
					h.setSpeed(0);
					for (int j = 0;j<z.size();j++){
						z.get(j).setSpeed(0);
					}
				}
			}
		}
		if (gameover==false&&time%100==0&&time!=0){
			score = score + 1;
		}
		if (gameover==false&&time%5000==0&&time!=0){
			Random r = new Random();
			int x = r.nextInt(700)+1;
			int y = r.nextInt(700)+1;
			Zombie zombie = new Zombie(x,y);
			z.add(zombie);
			canvas.drawZombie(g,zombie);
		}
		if (gameover==false&&time%50000==0&&time!=0){
			h.setBombs(h.getBombs()+1);
			output.println("You've earned another bomb! You now have "+h.getBombs()+"!");
		}
		time = time+1;
	}


	/**
	 * Your standard main method
	 * 
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
		Scanner s = new Scanner(System.in);
		System.out.println("Choose a level: Enter 1 for Level 1 and 2 for Level 2");
		level = s.nextInt();
		ZombieSurvival simulator = new ZombieSurvival();
		simulator.play();
	}

	/**
	 * This method starts the game.
	 */
	public void play() {
		canvas.setupAndDisplay();
	}
}
